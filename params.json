{"name":"Arbor","tagline":"a graph visualization library using web workers and jQuery","google":"","note":"Don't delete this file! It's used internally to help with page regeneration.","body":"arbor.js\r\n--------\r\n\r\nArbor is a graph visualization library built with web workers and\r\njQuery. Rather than trying to be an all-encompassing framework, arbor\r\nprovides an efficient, force-directed layout algorithm plus\r\nabstractions for graph organization and screen refresh handling.\r\n\r\nIt leaves the actual screen-drawing to you. This means you can use it\r\nwith canvas, SVG, or even positioned HTML elements; whatever display\r\napproach is appropriate for your project and your performance needs.\r\n\r\nAs a result, the code you write with it can be focused on the things\r\nthat make your project unique – the graph data and your visual style\r\n– rather than spending time on the physics math that makes the\r\nlayouts possible.\r\n\r\nInstallation\r\n------------\r\n\r\nTo use the particle system, add jquery and the file at lib/arbor.js\r\nto your path somewhere and include them in your html:\r\n\r\n  <script src=\"path/to/jquery.min.js\"></script>\r\n  <script src=\"path/to/arbor.js\"></script>  \r\n\r\nIf you want to let arbor handle realtime color and value tweens for\r\nyou, include the arbor-tween.js file as well. This will add a pair of\r\nnew tweening methods to the ParticleSystem object (see the docs to\r\ndecide if this appeals to you or not).\r\n\r\n  <script src=\"path/to/jquery.min.js\"></script>\r\n  <script src=\"path/to/arbor.js\"></script>\r\n  <script src=\"path/to/arbor-tween.js\"></script>\r\n\r\n\r\nGetting Started\r\n---------------\r\n\r\nThe docs folder contains a sample project that demonstrates some of the\r\nbasic idioms for working with the library to build a visualization. More\r\ndetailed documentation can be found at http://arborjs.org/reference.\r\n\r\nIn addition, the demos folder contains standalone versions of the demos\r\nat arborjs.org. But since all of them use xhr to fetch their data, you'll \r\nstill need to view them from an http server. If you don't have a copy of\r\napache handy, use the demo-server.sh script to create a local server.\r\n\r\nColophon\r\n--------\r\n\r\nArbor’s design is heavily influenced by Jeffrey Bernstein’s excellent\r\nTraer Physics[1] library for Processing. In addition, much of the\r\nphysics code has been adapted from Dennis Hotson’s springy.js[2]. The\r\nBarnes-Hut n-body implementation is based on Tom Ventimiglia and Kevin \r\nWayne’s vivid description[3] of the algorithm.\r\n\r\nThanks to all for releasing such elegantly simple and comprehensible\r\ncode.\r\n\r\n[1] <http://murderandcreate.com/physics/>\r\n[2] <https://github.com/dhotson/springy>\r\n[3] <http://arborjs.org/docs/barnes-hut>\r\n\r\nContribute\r\n----------\r\n\r\nCode submissions are greatly appreciated and highly encouraged. Please send\r\npull requests with fixes/enhancements/etc. to samizdatco on github. The \r\noldschool may also pipe their diff -u output to info@arborjs.org.\r\n\r\nLicense\r\n-------\r\n\r\nArbor is released under the MIT license. http://en.wikipedia.org/wiki/MIT_License"}